

    ***************************** mapper.xml 없이 쿼리 실행 **************************** (app1)

	- 예제 프로젝트 생성
 
	org.zerock.controller
  
	- pom.xml 수정 및 자바 version 수정 (properties)
  
		<properties>
			<java-version>1.8</java-version>
			<org.springframework-version>4.1.7.RELEASE</org.springframework-version>
			<org.aspectj-version>1.6.10</org.aspectj-version>
			<org.slf4j-version>1.6.6</org.slf4j-version>
		</properties>
	
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>    
		
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.16</version>
		</dependency>
		
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.1</version>
		</dependency>

		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.0</version>
		</dependency>   

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency> 

	- xml 네임스페이스 지정 
	
	root-context.xml 에 aop ,  mybatis-spring 지정
	
	- DataSource , SqlSessionFactory 설정
	
	root-context.xml 수정
	
	- mapper 인터페이스 작성
	
	org.zerock.persistence 페키지 추가
	
	- SampleMapperTest.java 를 사용해서 테스트를 한다.
	
	mapper.xml 이 없이도 , 애노테이션을 통해서 쿼리를 할 수 있다는 것을 확인 할 수 있다.
	
	
	----------------- Mapper 인터페이스와 XML 같이 활용하기 ----------------------
	
	
	SampleProvider.java 를 이용해서 처리 하는 테스트 
	
	SampleMapperTest.java 의 애노테이션 없는 메서드 테스트 
	
	
	
	***************************** 스프링 부트를 이용한 트로젝트 생성 **************************** (appTest)
	
	
	- STS 에서 스프링 부트 프로젝트 생성하기	
	
	프로젝트 생성 -> Spring Starter Project 선택 -> packaging : War 파일 선택하고 , Package 는 'org.zerock' 로 지정
	
	자동으로 모든 것들을 설정할수 있으나 , web 부분만 체크 후 생성 한다.
	
	- 생성 후 메인 클래스 자동 생성
	
	AppTestApplication 와 같이 프로젝트이름 + Application 의 파일이 자동으로 생성되며 , 내장된 tomcat 이 실행되는거 볼 수 있다.
	
	- controller 추가 
	
	http://localhost:8080/hello 테스트
	
	- 스프링 부트에서 데이터베이스 설정 
	
	프로젝트 생성시 필요한 라이브러리를 추가할 수 있지만 , 
	생성이 끝난 후에도 pom.xml 에 원하는 라이브러리를 추가할수 있다.
	
	주의해야 할 것은 일반적인 spring-jdbc 라이브러리가 아닌 spring-boot-starter-jdbc 가 사용된다.
	
	- pom.xml 추가
	
	<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		
	
	- application.properties 파일 설정
	
	파일들의 구조 ( src/main/resources ) 
	static : html , css , javaScript , 이미지 파일들을 보관하는 경로
	templates : Thymeleaf 와 같은 템플릿의 경로
	application.properties : 애플리케이션 내의 설정 파일 
	
	스프링 부트는 기본적으로 xml 이용하지않고 , 프로젝트 설정을 하도록 생성된다.
	문자열 들의 특별한 설정이 필요한 경우에 사용하는 것이 application.properties 파일이다.
	
	- dataSource 의 설정과 테스트 
	
	보통 두가지 방식을 사용한다. 
	
	@bean 을 이용한 설정 ,
	application.properties 이용한 설정 
	
	- application.properties 에 dataSource 에 대한 정보 및 여러가지 정보를 추가할수 있다.
	AppTestApplicationTests.java 파일을 통해 여러가지 테스트를 할 수 있다.
	
	- mybatis 설정 , pom.xml 에 추가 

		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.1.1</version>
		</dependency>
	
	- AppTestApplicationTests.java 테스트 
	
	- 필요 클래스 생성 
	MemberVO.java , MemberMapper.java 

	- mapper 인식 , 스프링 부트는 기본적으로 xml 설정을 피하는 형태를 많이 사용한다.
	AppTestApplication.java 파일에 아래의 내용 추가
	@MapperScan(value = { "org.zerock.mapper" })
	
	- AppTestApplicationTests.java 를 테스트 한다. 
	
	- 보통 xml 을 추가해야 하는 경우도 생긴다. 유지보수를 할때 혹은 추가 개발시 ...
	
	- memberMapper.xml 추가 및 설정 
	application.properties 추가 : mybatis.mapper-locations=classpath:/mappers/*.xml
	
	------------- 스프링 부트의 view 처리 ------------------------
	
    ------ jsp 를 위한 설정 변경 
	
	- application.properties 파일 변경 
	
	spring.view.prefix: /WEB-INF/views/
	spring.view.suffix: .jsp

	- 스프링 부트는 jsp 를 자동으로 처리해주지 못하기 때문에 추가적인 라이브러리를 사용해야 한다. 
	pom.xml 에 추가
	
	<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>	
	
	- 컨트롤러 및 jsp 테스트  
	HomeController.java 추가 
	WEB-INF -> views -> test.jsp 폴더및 파일 추가 
	
	- 기본적으로 한글 처리가 되지만 , 필터를 추가해야 하는 경우도 있기 때문에 filter 예제를 테스트 한다. 
	
	SampleFilter.java 추가 
	
	- 필터설정
	
	AppTestApplication.java 에 필터 설정 내용 추가 

    --------- 인터셉터 설정 

	- SampleInterceptor.java 추가 
	 AppTestWebMvcConfig.java 추가 
	 
	
	***************************** thymeleaf 의 설정 **************************** (app2)
	
	- 생성시 thymeleaf 를 선택하면 아래와 같이 pom.xml 에 라이브러리가 추가돼 있는거 확인할수 있다. 
	
	- pom.xml  
	<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
	- 테스트 
	http://localhost:8080/listTest
	listTest.html 를 뷰로 보게된다. 확장자는 html 을 사용한다. 
		
		
	















	